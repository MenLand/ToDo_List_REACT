{"version":3,"sources":["components/AddItem/AddItem.jsx","contexts/EventsContext.jsx","components/ItemsList/Item/Item.jsx","components/ItemsList/ItemsList.jsx","components/Loading/Loading.jsx","containers/TooDo/TooDo.jsx","App.js","serviceWorker.js","index.js"],"names":["AddItem","onSubmit","inputValue","React","createRef","action","className","e","preventDefault","current","value","ref","type","createContext","Item","completed","order","title","id","classes","useContext","EventsContext","changeInput","deleteItem","onClick","target","closest","checked","readOnly","bind","ItemsList","items","map","data","index","key","Loading","TooDo","state","isLoading","handleAddItem","newItem","Math","random","setState","newItems","filter","item","fetch","then","response","json","setTimeout","slice","console","log","this","Provider","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16e3ded0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AddItem.css';\r\n\r\nconst AddItem = ({ onSubmit }) => {\r\n    const inputValue = React.createRef();\r\n\r\n    const handleAddItem = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.current.value) {\r\n            onSubmit(inputValue.current.value);\r\n            inputValue.current.value = '';\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <form action=\"\" className=\"add-item\" onSubmit={handleAddItem}>\r\n            <input ref={inputValue} type=\"text\" />\r\n            <button>Add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddItem;","import React from 'react';\r\n\r\nexport default React.createContext()","import React, { useContext } from 'react';\r\nimport './Item.css';\r\nimport EventsContext from '../../../contexts/EventsContext';\r\n\r\nconst Item = ({ completed, order, title, id }) => {\r\n    const classes = completed ? 'item completed' : 'item';\r\n    const { changeInput, deleteItem } = useContext(EventsContext);\r\n\r\n    const changeComplete = ({ target }) => {\r\n        if (target.closest('button')) return;\r\n        changeInput(id);\r\n    }\r\n\r\n    return (\r\n        <div className={classes} onClick={changeComplete}>\r\n            <input type=\"checkbox\" checked={completed} readOnly/>\r\n            <span><strong>{order + 1}</strong>{title}</span>\r\n            <button onClick={deleteItem.bind(null, id)} >&times;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item/Item';\r\n\r\nconst ItemsList = ({ items }) => {\r\n    return (\r\n        <div>\r\n            {items.map((data, index) => (\r\n                <Item key={data.id} {...data} order={index} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ItemsList;","import React from 'react';\r\nimport '../../components/Loading/Loading.css';\r\n\r\nconst Loading = () => (\r\n    <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n)\r\n\r\nexport default Loading;","import React from 'react';\r\nimport './TooDo.css';\r\nimport AddItem from '../../components/AddItem/AddItem';\r\nimport EventsContext from '../../contexts/EventsContext';\r\nimport ItemsList from '../../components/ItemsList/ItemsList';\r\nimport Loading from '../../components/Loading/Loading';\r\n\r\n// const ItemsList = React.lazy(() => new Promise(res => {\r\n//     setTimeout(() => res(import('../../components/ItemsList/ItemsList')), 3000)\r\n\r\n// }));\r\n\r\nclass TooDo extends React.Component {\r\n    state = {\r\n        isLoading: false,\r\n        items: []\r\n    }\r\n\r\n    handleAddItem = (value) => {\r\n        const newItem = { completed: false, title: value, id: Math.random() };\r\n        this.setState({ items: [...this.state.items, newItem] })\r\n    }\r\n\r\n    deleteItem = (id) => {\r\n        const newItems = this.state.items.filter(item => item.id !== id);\r\n        this.setState({ items: newItems })\r\n    }\r\n\r\n    changeInput = (id) => {\r\n        const newItems = this.state.items.map(item => {\r\n            if (item.id === id) item.completed = !item.completed;\r\n            return item;\r\n        })\r\n\r\n        this.setState({ items: newItems })\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/todos')\r\n            .then(response => response.json())\r\n            .then(json => setTimeout(() => this.setState({\r\n                items: json.slice(0, 5),\r\n                isLoading: true\r\n            }), 3000))\r\n    }\r\n\r\n    render() {\r\n        console.log('RENDER');\r\n        const { items, isLoading } = this.state;\r\n        return (\r\n            <div className=\"too-do\">\r\n                <h1>Too Do List</h1>\r\n                <AddItem onSubmit={this.handleAddItem} />\r\n                <hr />\r\n                <h3>Items: </h3>\r\n                <EventsContext.Provider value={{\r\n                    changeInput: this.changeInput,\r\n                    deleteItem: this.deleteItem\r\n                }}>\r\n                    {items.length\r\n                        ? <ItemsList items={items} />\r\n                        : isLoading\r\n                            ? <h4>No items :(</h4>\r\n                            : <Loading />\r\n                    }\r\n                </EventsContext.Provider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TooDo;","import React from 'react';\nimport TooDo from './containers/TooDo/TooDo.jsx';\n\nclass App extends React.Component {\n  render() {\n    return (\n        <TooDo />\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}